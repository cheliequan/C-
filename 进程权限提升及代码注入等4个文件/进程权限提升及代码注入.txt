/*********************************************
** 注入系统进程
/********************************************/
BOOL Program::InjectDll(DWORD dwPID){
	char szDllPath[MAX_PATH+1];
	GetCurrentDirectory(MAX_PATH,szDllPath);	
	strcat(szDllPath, "\\testFileDatabase.dll");
	//printf("注入dll为%s\n", szDllPath);
	//Releaseinfo(szDllPath);
	////////////////////////////////////////////////////////////////////////
	// 提升系统权限
	HANDLE hToken;
    LUID uID;
    TOKEN_PRIVILEGES tp;
    OpenProcessToken(GetCurrentProcess(),TOKEN_ALL_ACCESS,&hToken);
    LookupPrivilegeValue(NULL,SE_DEBUG_NAME,&uID);
 
    tp.PrivilegeCount=1;
    tp.Privileges[0].Luid=uID;
    tp.Privileges[0].Attributes=SE_PRIVILEGE_ENABLED;
 
    AdjustTokenPrivileges(hToken,FALSE,&tp,sizeof(tp),NULL,NULL);
 
	if (hToken != NULL)
		CloseHandle(hToken);
	else{
		printf("access failed!\n");
		return FALSE;
	}

	HANDLE hProcess = NULL;
	HANDLE hThread = NULL;
	HMODULE hMod = NULL;
	LPVOID pRemoteBuf = NULL;

	//注入
	DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);
	LPTHREAD_START_ROUTINE pThreadProc;

	if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID))){
		_tprintf("OpenProcess(%d)failed![%d]\n", dwPID, GetLastError());
		return FALSE;
	}
	pRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);
	if (!WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL)){
		printf("writeprocessmemory failed!\n");
		return FALSE;
	}
	hMod = GetModuleHandle("kernel32.dll");
	pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, "LoadLibraryA");
	hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);
	if (!hThread){
		_tprintf("create thread failed!\n");
		return FALSE;
	}

	WaitForSingleObject(hThread, INFINITE);
	if (pRemoteBuf != NULL)
		VirtualFreeEx(hProcess, pRemoteBuf, 0, MEM_RELEASE);
	if (hThread != NULL)
		CloseHandle(hThread);
	if (hProcess != NULL)
		CloseHandle(hProcess);
	Releaseinfo("inject over");
	return TRUE;
}